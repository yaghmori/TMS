// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TMS.DataAccess.Context;

#nullable disable

namespace TMS.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(ServerDbContext))]
    partial class ServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TMS.Core.Domain.Entities.AppSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("225ab570-cfa8-4ee5-baaa-7d934d7fa1b3"),
                            CreatedDate = new DateTime(2022, 11, 13, 20, 50, 19, 339, DateTimeKind.Utc).AddTicks(1779),
                            Key = "DefaultConnectionString",
                            Value = "Server=.;Database={0};Integrated Security = True;"
                        });
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.Culture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateSeparator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FirstDayOfWeek")
                        .HasColumnType("int");

                    b.Property<string>("FullDateTimePattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LongDatePattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongTimePattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonthDayPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedCultureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RightToLeft")
                        .HasColumnType("bit");

                    b.Property<string>("ShortDatePattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortTimePattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeSeparator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearMonthPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cultures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3c4fbe8-d03d-4cec-b6ed-654c9ea2f39f"),
                            CreatedDate = new DateTime(2022, 11, 13, 20, 50, 18, 763, DateTimeKind.Utc).AddTicks(82),
                            CultureName = "en-US",
                            DateSeparator = "/",
                            DisplayName = "English",
                            FirstDayOfWeek = 1,
                            FullDateTimePattern = "dddd, MMMM dd, yyyy h:mm:ss tt",
                            Image = "_content/TMS.RootComponents/assets/media/flags/usa.svg",
                            IsDefault = true,
                            LongDatePattern = "dddd, MMMM dd, yyyy",
                            LongTimePattern = "HH:mm:ss",
                            MonthDayPattern = "MMMM dd",
                            NormalizedCultureName = "EN-US",
                            NormalizedDisplayName = "ENGLISH",
                            RightToLeft = false,
                            ShortDatePattern = "yyyy/MM/dd",
                            ShortTimePattern = "HH:mm",
                            TimeSeparator = ":",
                            YearMonthPattern = "MMMM, yyyy"
                        },
                        new
                        {
                            Id = new Guid("746a9237-cf40-49da-8bb1-12fcff344bb1"),
                            CreatedDate = new DateTime(2022, 11, 13, 20, 50, 18, 763, DateTimeKind.Utc).AddTicks(4029),
                            CultureName = "fa-IR",
                            DateSeparator = "/",
                            DisplayName = "فارسی",
                            FirstDayOfWeek = 6,
                            FullDateTimePattern = "dddd, MMMM dd, yyyy h:mm:ss tt",
                            Image = "_content/TMS.RootComponents/assets/media/flags/iran.svg",
                            IsDefault = false,
                            LongDatePattern = "dddd, MMMM dd, yyyy ",
                            LongTimePattern = "HH:mm:ss",
                            MonthDayPattern = "MMMM dd",
                            NormalizedCultureName = "FA-IR",
                            NormalizedDisplayName = "فارسی",
                            RightToLeft = true,
                            ShortDatePattern = "yyyy/MM/dd",
                            ShortTimePattern = "HH:mm",
                            TimeSeparator = ":",
                            YearMonthPattern = "MMMM, yyyy"
                        });
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInsuranceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthIdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthIdentitySerial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Children")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EconomicalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationalField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FamilyCount")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FieldOfActivity")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InsuranceHistory")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MarriageDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2"),
                            CreatedDate = new DateTime(2022, 11, 13, 20, 50, 18, 754, DateTimeKind.Utc).AddTicks(1098),
                            Name = "sysadmin",
                            NormalizedName = "SYSADMIN"
                        },
                        new
                        {
                            Id = new Guid("b9afe837-7566-4516-93fa-cdc3d0f9289d"),
                            CreatedDate = new DateTime(2022, 11, 13, 20, 50, 18, 762, DateTimeKind.Utc).AddTicks(8427),
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("c3c1384e-9822-49f1-97c5-0d065426329b"),
                            CreatedDate = new DateTime(2022, 11, 13, 20, 50, 18, 762, DateTimeKind.Utc).AddTicks(8457),
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("fe299f1c-4a8c-4f2b-8c9e-52091391781e"),
                            CreatedDate = new DateTime(2022, 11, 13, 20, 50, 18, 762, DateTimeKind.Utc).AddTicks(8460),
                            Name = "owner",
                            NormalizedName = "OWNER"
                        });
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "permission",
                            ClaimValue = "SensorHistorie.View",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "permission",
                            ClaimValue = "SensorHistorie.Create",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "permission",
                            ClaimValue = "SensorHistorie.Edit",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "permission",
                            ClaimValue = "SensorHistorie.Delete",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "permission",
                            ClaimValue = "SensorHistorie.Export",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "permission",
                            ClaimValue = "SensorHistorie.Search",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "permission",
                            ClaimValue = "ProjectSetting.View",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "permission",
                            ClaimValue = "ProjectSetting.Edit",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "permission",
                            ClaimValue = "UserClaim.View",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "permission",
                            ClaimValue = "UserClaim.Edit",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "permission",
                            ClaimValue = "Client.View",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "permission",
                            ClaimValue = "Client.Create",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "permission",
                            ClaimValue = "Client.Edit",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "permission",
                            ClaimValue = "Client.Delete",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "permission",
                            ClaimValue = "Client.Search",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "permission",
                            ClaimValue = "Client.AddOrRemoveUsers",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "permission",
                            ClaimValue = "Client.Configuration",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "permission",
                            ClaimValue = "User.View",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "permission",
                            ClaimValue = "User.ViewSessions",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "permission",
                            ClaimValue = "User.TerminateSession",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "permission",
                            ClaimValue = "User.Create",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "permission",
                            ClaimValue = "User.Edit",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "permission",
                            ClaimValue = "User.AddOrRemovePermissions",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "permission",
                            ClaimValue = "User.AddOrRemoveRoles",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "permission",
                            ClaimValue = "User.AddOrRemoveTenant",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "permission",
                            ClaimValue = "User.Delete",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 27,
                            ClaimType = "permission",
                            ClaimValue = "User.Export",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 28,
                            ClaimType = "permission",
                            ClaimValue = "User.Search",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 29,
                            ClaimType = "permission",
                            ClaimValue = "Role.View",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 30,
                            ClaimType = "permission",
                            ClaimValue = "Role.AddOrRemoveUsers",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 31,
                            ClaimType = "permission",
                            ClaimValue = "Role.AddOrRemoveClaims",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 32,
                            ClaimType = "permission",
                            ClaimValue = "Role.Create",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 33,
                            ClaimType = "permission",
                            ClaimValue = "Role.Edit",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 34,
                            ClaimType = "permission",
                            ClaimValue = "Role.Delete",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 35,
                            ClaimType = "permission",
                            ClaimValue = "Role.Search",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 36,
                            ClaimType = "permission",
                            ClaimValue = "RoleClaim.View",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 37,
                            ClaimType = "permission",
                            ClaimValue = "RoleClaim.Create",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 38,
                            ClaimType = "permission",
                            ClaimValue = "RoleClaim.Edit",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 39,
                            ClaimType = "permission",
                            ClaimValue = "RoleClaim.Delete",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 40,
                            ClaimType = "permission",
                            ClaimValue = "RoleClaim.Search",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 41,
                            ClaimType = "permission",
                            ClaimValue = "Communication.SendMessage",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 42,
                            ClaimType = "permission",
                            ClaimValue = "Communication.Chat",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 43,
                            ClaimType = "permission",
                            ClaimValue = "Preference.ChangeLanguage",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 44,
                            ClaimType = "permission",
                            ClaimValue = "Dashboard.View",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 45,
                            ClaimType = "permission",
                            ClaimValue = "AdminDashboard.View",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 46,
                            ClaimType = "permission",
                            ClaimValue = "AuditTrail.View",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 47,
                            ClaimType = "permission",
                            ClaimValue = "AuditTrail.Export",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 48,
                            ClaimType = "permission",
                            ClaimValue = "AuditTrail.Search",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 49,
                            ClaimType = "permission",
                            ClaimValue = "IdentityManagement.Menu",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 50,
                            ClaimType = "permission",
                            ClaimValue = "IdentityManagement.View",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 51,
                            ClaimType = "permission",
                            ClaimValue = "UserProfile.View",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 52,
                            ClaimType = "permission",
                            ClaimValue = "UserProfile.Edit",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 53,
                            ClaimType = "permission",
                            ClaimValue = "AppSetting.View",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 54,
                            ClaimType = "permission",
                            ClaimValue = "AppSetting.Create",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 55,
                            ClaimType = "permission",
                            ClaimValue = "AppSetting.Edit",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 56,
                            ClaimType = "permission",
                            ClaimValue = "AppSetting.Delete",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 57,
                            ClaimType = "permission",
                            ClaimValue = "AppSetting.Search",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 58,
                            ClaimType = "permission",
                            ClaimValue = "UserSetting.View",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 59,
                            ClaimType = "permission",
                            ClaimValue = "UserSetting.Create",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 60,
                            ClaimType = "permission",
                            ClaimValue = "UserSetting.Edit",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 61,
                            ClaimType = "permission",
                            ClaimValue = "UserSetting.Delete",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        },
                        new
                        {
                            Id = 62,
                            ClaimType = "permission",
                            ClaimValue = "UserSetting.Search",
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        });
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DBProvider")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Issuer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EmailTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PasswordTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PhoneNumberTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumberVerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PhoneNumberVerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc206917-2b17-45ca-9929-72cc08ad2f1d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "deccfa19-fd07-465f-9763-7035c8f846c3",
                            Description = "",
                            Email = "sysadmin@tms.com",
                            EmailConfirmed = true,
                            FirstName = "sys",
                            Image = "",
                            IsActive = true,
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSADMIN@TMS.COM",
                            NormalizedUserName = "SYSADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEObbwkOKs64vSYqAxteyPEQAXDQRm6Qj1+pMhRyJ8GoRlOInlzVziXjVarcortxJ0w==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = true,
                            ProfileName = "System Admin",
                            SecurityStamp = "f5320257-95df-47c5-9419-3786e96992e5",
                            SettingsId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TwoFactorEnabled = false,
                            UserName = "sysadmin"
                        });
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("dc206917-2b17-45ca-9929-72cc08ad2f1d"),
                            RoleId = new Guid("1024cb20-6df9-4ecb-86c8-96a8897e00b2")
                        });
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions", (string)null);
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.UserSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DarkMode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DefaultTenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RightToLeft")
                        .HasColumnType("bit");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DefaultTenantId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c98fef7-0fab-4c27-84cf-45b1e88ff1e3"),
                            CreatedDate = new DateTime(2022, 11, 13, 20, 50, 19, 339, DateTimeKind.Utc).AddTicks(1652),
                            Culture = "en-US",
                            DarkMode = false,
                            RightToLeft = false,
                            Theme = "",
                            UserId = new Guid("dc206917-2b17-45ca-9929-72cc08ad2f1d")
                        });
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.UserTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTenants");
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.Person", b =>
                {
                    b.HasOne("TMS.Core.Domain.Entities.User", "User")
                        .WithMany("Persons")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.RoleClaim", b =>
                {
                    b.HasOne("TMS.Core.Domain.Entities.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.UserClaim", b =>
                {
                    b.HasOne("TMS.Core.Domain.Entities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.UserLogin", b =>
                {
                    b.HasOne("TMS.Core.Domain.Entities.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("TMS.Core.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TMS.Core.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.UserSession", b =>
                {
                    b.HasOne("TMS.Core.Domain.Entities.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.UserSetting", b =>
                {
                    b.HasOne("TMS.Core.Domain.Entities.Tenant", "DefaultTenant")
                        .WithMany()
                        .HasForeignKey("DefaultTenantId");

                    b.HasOne("TMS.Core.Domain.Entities.User", "User")
                        .WithOne("Settings")
                        .HasForeignKey("TMS.Core.Domain.Entities.UserSetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultTenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.UserTenant", b =>
                {
                    b.HasOne("TMS.Core.Domain.Entities.Tenant", "Tenant")
                        .WithMany("UserTenants")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TMS.Core.Domain.Entities.User", "User")
                        .WithMany("UserTenants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.UserToken", b =>
                {
                    b.HasOne("TMS.Core.Domain.Entities.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("UserTenants");
                });

            modelBuilder.Entity("TMS.Core.Domain.Entities.User", b =>
                {
                    b.Navigation("Persons");

                    b.Navigation("Settings")
                        .IsRequired();

                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSessions");

                    b.Navigation("UserTenants");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
